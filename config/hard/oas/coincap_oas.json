{
  "openapi": "3.0.3",
  "info": {
    "title": "CoinCap REST API",
    "version": "2.0.0",
    "description": "CoinCap provides real-time pricing and market activity data through REST endpoints."
  },
  "servers": [
    {
      "url": "https://api.coincap.io/v2",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Assets",
      "description": "Endpoints related to digital assets"
    },
    {
      "name": "Rates",
      "description": "Endpoints related to currency rates"
    },
    {
      "name": "Exchanges",
      "description": "Endpoints related to cryptocurrency exchanges"
    },
    {
      "name": "Markets",
      "description": "Endpoints related to markets"
    },
    {
      "name": "Candles",
      "description": "Endpoints related to historical OHLCV data"
    }
  ],
  "paths": {
    "/assets": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get a list of assets",
        "description": "Retrieves a list of all assets. Supports pagination, filtering by IDs, searching, and sorting.",
        "operationId": "getAssets",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Comma-separated list of asset IDs to filter (e.g., 'bitcoin,ethereum').",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by asset name or symbol (e.g., 'bit').",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results to return (maximum 2000).",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting index for pagination.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by a specific field (e.g., 'rank', 'priceUsd'). Prepend '-' to sort descending (e.g., '-rank').",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful - this is the data you were looking for",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/assets/{id}": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get a single asset",
        "description": "Retrieves detailed information about a specific asset by its ID (e.g., 'bitcoin').",
        "operationId": "getAssetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Asset ID (e.g., 'bitcoin', 'ethereum').",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful - this is the data you were looking for",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/assets/{id}/history": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get asset history",
        "description": "Returns historical price data for a specific asset at the specified interval and time range.",
        "operationId": "getAssetHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Asset ID (e.g., 'bitcoin', 'ethereum').",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "Time interval (m1, m5, m15, m30, h1, h2, h6, h12, d1).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start time for the requested period (Unix timestamp). Required if 'end' is specified.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "End time for the requested period (Unix timestamp). Required if 'start' is specified.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful - returns historical data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetHistoryResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/assets/{id}/markets": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get markets for an asset",
        "description": "Returns market data (trading pairs) for a specific asset.",
        "operationId": "getAssetMarkets",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Asset ID (e.g., 'bitcoin', 'ethereum').",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results to return (maximum 2000).",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting index for pagination.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quote",
            "in": "query",
            "description": "Filter by quote symbol (e.g., 'USD').",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful - returns a list of markets for this asset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetMarketsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/rates": {
      "get": {
        "tags": [
          "Rates"
        ],
        "summary": "Get rates",
        "description": "Retrieves a list of fiat/crypto rates.",
        "operationId": "getRates",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results to return (maximum 2000).",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting index for pagination.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful - this is the data you were looking for",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatesResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/rates/{id}": {
      "get": {
        "tags": [
          "Rates"
        ],
        "summary": "Get a single rate",
        "description": "Retrieves information for a specific rate (e.g., 'bitcoin').",
        "operationId": "getRateById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Rate ID (e.g., 'bitcoin').",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful - this is the data you were looking for",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/exchanges": {
      "get": {
        "tags": [
          "Exchanges"
        ],
        "summary": "Get a list of exchanges",
        "description": "Retrieves a list of supported cryptocurrency exchanges.",
        "operationId": "getExchanges",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results to return (maximum 2000).",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting index for pagination.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by exchange name (e.g., 'binance').",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful - this is the data you were looking for",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExchangesResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/exchanges/{id}": {
      "get": {
        "tags": [
          "Exchanges"
        ],
        "summary": "Get a single exchange",
        "description": "Retrieves information about a specific exchange by ID (e.g., 'binance').",
        "operationId": "getExchangeById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Exchange ID (e.g., 'binance').",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful - this is the data you were looking for",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExchangeResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/markets": {
      "get": {
        "tags": [
          "Markets"
        ],
        "summary": "Get a list of markets",
        "description": "Retrieves a list of markets, optionally filtered by exchange ID, base/quote symbol, base/quote ID, or asset symbol. Supports pagination and sorting.",
        "operationId": "getMarkets",
        "parameters": [
          {
            "name": "exchangeId",
            "in": "query",
            "description": "Filter markets by a specific exchange ID (e.g., 'binance').",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseSymbol",
            "in": "query",
            "description": "Filter markets by base symbol (e.g., 'BTC').",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteSymbol",
            "in": "query",
            "description": "Filter markets by quote symbol (e.g., 'USD').",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseId",
            "in": "query",
            "description": "Filter markets by base asset ID (e.g., 'bitcoin').",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteId",
            "in": "query",
            "description": "Filter markets by quote asset ID (e.g., 'tether').",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetSymbol",
            "in": "query",
            "description": "Filter markets by any matching symbol in base or quote (e.g., 'eth').",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results to return (maximum 2000).",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting index for pagination.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by a specific field (e.g., 'volumeUsd24Hr'). Prepend '-' for descending (e.g., '-volumeUsd24Hr').",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful - this is the data you were looking for",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/candles": {
      "get": {
        "tags": [
          "Candles"
        ],
        "summary": "Get OHLCV candles",
        "description": "Retrieves candlestick (OHLCV) data for a specific market, interval, and time range.",
        "operationId": "getCandles",
        "parameters": [
          {
            "name": "exchange",
            "in": "query",
            "description": "Exchange ID (e.g., 'binance'). Required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "Time interval for candles (m1, m5, m15, m30, h1, h2, h6, h12, d1). Required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseId",
            "in": "query",
            "description": "Base asset ID (e.g., 'bitcoin'). Required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteId",
            "in": "query",
            "description": "Quote asset ID (e.g., 'tether'). Required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start time for the requested period (Unix timestamp). Required if 'end' is specified.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "End time for the requested period (Unix timestamp). Required if 'start' is specified.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of candlesticks to return (maximum 2000).",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful - returns OHLCV candle data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandlesResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Client error - the request is invalid or cannot be processed.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ClientError"
            },
            "examples": {
              "invalidInterval": {
                "summary": "Use valid interval",
                "value": {
                  "error": "use valid interval: m1, m5, m15, m30, h1, h2, h6, h12, d1"
                }
              },
              "missingExchange": {
                "summary": "Missing exchange",
                "value": {
                  "error": "missing exchange"
                }
              },
              "missingInterval": {
                "summary": "Missing interval",
                "value": {
                  "error": "missing interval"
                }
              },
              "missingBase": {
                "summary": "Missing base",
                "value": {
                  "error": "missing base"
                }
              },
              "missingQuote": {
                "summary": "Missing quote",
                "value": {
                  "error": "missing quote"
                }
              },
              "missingStart": {
                "summary": "Query requires start",
                "value": {
                  "error": "query requires start"
                }
              },
              "missingEnd": {
                "summary": "Query requires end",
                "value": {
                  "error": "query requires end"
                }
              },
              "limitExceeded": {
                "summary": "Limit exceeds 2000",
                "value": {
                  "error": "limit exceeds 2000"
                }
              }
            }
          }
        }
      },
      "ServerError": {
        "description": "Server error - something went down on our end. Try again soon!",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServerErrorMessage"
            }
          }
        }
      }
    },
    "schemas": {
      "ClientError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Description of what went wrong with the client’s request"
          }
        },
        "example": {
          "error": "use valid interval"
        }
      },
      "ServerErrorMessage": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Description of the server error"
          }
        },
        "example": {
          "error": "Something went wrong on our end. Please try again later."
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "A human-readable error message"
          }
        },
        "example": {
          "error": "Unexpected error"
        }
      },
      "AssetsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          "timestamp": {
            "type": "integer",
            "example": 1654048668067
          }
        }
      },
      "AssetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Asset"
          },
          "timestamp": {
            "type": "integer",
            "example": 1654048668067
          }
        }
      },
      "Asset": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "bitcoin"
          },
          "rank": {
            "type": "string",
            "example": "1"
          },
          "symbol": {
            "type": "string",
            "example": "BTC"
          },
          "name": {
            "type": "string",
            "example": "Bitcoin"
          },
          "supply": {
            "type": "string",
            "example": "19000000"
          },
          "maxSupply": {
            "type": "string",
            "example": "21000000"
          },
          "marketCapUsd": {
            "type": "string",
            "example": "600000000000"
          },
          "volumeUsd24Hr": {
            "type": "string",
            "example": "20000000000"
          },
          "priceUsd": {
            "type": "string",
            "example": "30000"
          },
          "changePercent24Hr": {
            "type": "string",
            "example": "1.25"
          },
          "vwap24Hr": {
            "type": "string",
            "example": "29850.23"
          },
          "explorer": {
            "type": "string",
            "example": "https://blockchain.info/"
          }
        }
      },
      "AssetHistoryResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetHistoryPoint"
            }
          },
          "timestamp": {
            "type": "integer",
            "example": 1654048668067
          }
        }
      },
      "AssetHistoryPoint": {
        "type": "object",
        "properties": {
          "priceUsd": {
            "type": "string",
            "example": "30000.75"
          },
          "time": {
            "type": "integer",
            "description": "Unix timestamp of this historical data point",
            "example": 1654048668067
          },
          "circulatingSupply": {
            "type": "string",
            "example": "19000000"
          },
          "date": {
            "type": "string",
            "description": "UTC date/time string",
            "example": "2023-05-20T00:00:00.000Z"
          }
        }
      },
      "AssetMarketsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Market"
            }
          },
          "timestamp": {
            "type": "integer",
            "example": 1654048668067
          }
        }
      },
      "Market": {
        "type": "object",
        "properties": {
          "exchangeId": {
            "type": "string",
            "example": "binance"
          },
          "baseId": {
            "type": "string",
            "example": "bitcoin"
          },
          "quoteId": {
            "type": "string",
            "example": "tether"
          },
          "baseSymbol": {
            "type": "string",
            "example": "BTC"
          },
          "quoteSymbol": {
            "type": "string",
            "example": "USDT"
          },
          "volumeUsd24Hr": {
            "type": "string",
            "example": "123456789.12"
          },
          "priceUsd": {
            "type": "string",
            "example": "30000"
          },
          "volumePercent": {
            "type": "string",
            "example": "1.23"
          }
        }
      },
      "RatesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rate"
            }
          },
          "timestamp": {
            "type": "integer",
            "example": 1654048668067
          }
        }
      },
      "RateResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Rate"
          },
          "timestamp": {
            "type": "integer",
            "example": 1654048668067
          }
        }
      },
      "Rate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "bitcoin"
          },
          "symbol": {
            "type": "string",
            "example": "BTC"
          },
          "currencySymbol": {
            "type": "string",
            "example": "₿"
          },
          "type": {
            "type": "string",
            "example": "crypto"
          },
          "rateUsd": {
            "type": "string",
            "example": "30000"
          }
        }
      },
      "ExchangesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Exchange"
            }
          },
          "timestamp": {
            "type": "integer",
            "example": 1654048668067
          }
        }
      },
      "ExchangeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Exchange"
          },
          "timestamp": {
            "type": "integer",
            "example": 1654048668067
          }
        }
      },
      "Exchange": {
        "type": "object",
        "properties": {
          "exchangeId": {
            "type": "string",
            "example": "binance"
          },
          "name": {
            "type": "string",
            "example": "Binance"
          },
          "rank": {
            "type": "string",
            "example": "1"
          },
          "percentTotalVolume": {
            "type": "string",
            "example": "13.25"
          },
          "volumeUsd": {
            "type": "string",
            "example": "123456789.12"
          },
          "tradingPairs": {
            "type": "string",
            "example": "456"
          },
          "socket": {
            "type": "boolean",
            "example": true
          },
          "exchangeUrl": {
            "type": "string",
            "example": "https://www.binance.com/"
          }
        }
      },
      "MarketsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Market"
            }
          },
          "timestamp": {
            "type": "integer",
            "example": 1654048668067
          }
        }
      },
      "CandlesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Candle"
            }
          },
          "timestamp": {
            "type": "integer",
            "example": 1654048668067
          }
        }
      },
      "Candle": {
        "type": "object",
        "properties": {
          "open": {
            "type": "string",
            "example": "30000.25"
          },
          "high": {
            "type": "string",
            "example": "30500.00"
          },
          "low": {
            "type": "string",
            "example": "29500.50"
          },
          "close": {
            "type": "string",
            "example": "30250.75"
          },
          "volume": {
            "type": "string",
            "example": "12345.6789"
          },
          "period": {
            "type": "integer",
            "description": "Unix timestamp for the candle start.",
            "example": 1654048668000
          }
        }
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "x-additionalInformation": "Status Codes:\n- 200: Successful - this is the data you were looking for\n- 400-417: Client error (with a message indicating how to correct the request)\n- 500-505: Server error (something went down on our end, please try again soon)\n\nHeaders:\n- Accept-Encoding: gzip or deflate to enable compression\n- If you have an API Key, use it as a Bearer Token (Authorization: Bearer <API_KEY>)\n\nLimits:\nFree Tier (No API Key): 200 requests/minute, 11 years of historical data\nFree Tier (API Key): 500 requests/minute, 11 years of historical data\n\nRequest an API Key: https://coincap.io/api-key\n\nFor full documentation, visit: https://docs.coincap.io/"
}
